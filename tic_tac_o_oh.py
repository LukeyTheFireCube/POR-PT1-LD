# A monolithic and poorly written tic-tac-toe for you to refactor.
# Generated by ChatGPT 4, refactored by Luke Downes.
# Game state
from src.grid import Grid
from src.conditions import Conditions
import os

def get_items():
    p1 = "X"
    p2 = "O"
    empty = " "
    grid = Grid(3)
    board = grid.get_grid()
    conditions = Conditions(board, empty, p1, p2)
    return p1, p2, empty, grid, board, conditions

def gameplay():
    p1, p2, empty, grid, board, conditions = get_items()
    condition = ""
    while condition == "":
        # Get next move
        while True:
            player = p1 if board.count(empty) % 2 == 1 else p2
            move = input(f"Next move for player {player} (1-{len(board)}): ")
            if move.isdigit():
                move = int(move)
                move -= 1
                if 0 <= move <= (len(board) - 1) and board[move] == empty:
                    board[int(move)] = player
                    break
                else:
                    clear()
                    print("Move is out of range of board, try again.")
            else:
                clear()
                print("Invalid move, try again.")
        grid.print_board(board)
        condition = conditions.check_conditions()

def clear():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
clear()

# setup
P1, P2, Empty, the_grid, the_board, the_conditions = get_items()
the_grid.print_board(the_board)
gameplay()

# Post-game
while True:
    dummy = input("Play again? (Y/N): ")
    while dummy.upper() != "Y" and dummy.upper() != "N":
        dummy = input("Play again? (Y/N): ")
    if dummy.upper() == "Y":
        the_grid.print_board(the_board)
        gameplay()
    elif dummy.upper() == "N":
        exit(0)


